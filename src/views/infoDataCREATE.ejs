<%- include('partials/header'); -%> <%- include('partials/navbar'); -%>

<form style="margin-left: 10px; margin-right: 50px" action="/infoData">
  <h2 style="margin-top: 5px">Create Data Form</h2>
  <div id="info-data-disclaimer" class="info-data error alert alert-primary" role="alert">
    Disclaimer! The inputs are shown for you to see how the form will look like to the client, this
    is why you cannot fill them in (except title and admin code), focus on ensuring the right key
    values are present!
  </div>
  <div id="info-data-error" class="info-data error alert alert-info" role="alert">
    Please fill out the info below to create your document
  </div>
  <div class="mb-3">
    <label for="formTitle" class="form-label">Form Title</label>
    <input type="text" name="title" class="form-control" placeholder="My Form Name" required />
  </div>
  <div class="mb-3">
    <label for="adminCode" class="form-label">Admin Code</label>
    <% if (auth) { %>
    <input
      type="text"
      name="adminCode"
      class="form-control"
      placeholder="<%= auth.code %>"
      readonly
    />
    <% } else { %>
    <input type="text" name="adminCode" class="form-control" placeholder="code123" />
    readonly /> <% } %>
  </div>
  <p id="add_after_me"></p>
  <br />
  <div style="margin-left: 5px; margin-right: 5px; margin-bottom: 8px">
    <button class="btn btn-info" id="add-item-btn">Add Key</button>
    <button class="btn btn-danger" style="margin-left: 5px" id="remove-item-btn">Remove Key</button>
  </div>
  <div class="mb-3">
    <label for="newItem" class="newItem form-label">Key</label>
    <input
      type="text"
      id="new-item-input"
      name="newItem"
      class="form-control"
      placeholder="my-key"
    />
  </div>
  <br />
  <div style="text-align: center">
    <button class="btn btn-primary" style="font-size: xx-large">Finish Creating Form</button>
  </div>
</form>

<script>
  const form = document.querySelector("form");
  const addButton = document.getElementById("add-item-btn");
  const removeButton = document.getElementById("remove-item-btn");
  const infoError = document.getElementById("info-data-error");
  const JOINER = "_^_";
  const dataStore = {};
  const restricted = [
    "AdminCode",
    "title",
    "Admincode",
    "Title",
    "admincode",
    "adminCode",
    "Admincode",
    "admin-code",
    "Admin-Code",
    "admin-Code",
    "Admin-code"
  ];
  const inputNew = document.getElementById("new-item-input");
  const errorClass = "info-data alert alert-danger";
  const infoClass = "info-data alert alert-info";
  const originalContent = "Please fill out the info below to sign up.";

  addButton.addEventListener("click", function appendRow(e) {
    e.preventDefault();
    const userInput = form.newItem.value.trim();
    const key = userInput.split(" ").join(JOINER);
    if (!key || key === "") {
      infoError.className = errorClass;
      infoError.textContent = "Key cannot be empty!";
    } else if (dataStore[key] || restricted.includes(key)) {
      infoError.className = errorClass;
      infoError.textContent = "Cannot have duplicate keys!";
    } else {
      infoError.className = infoClass;
      infoError.textContent = originalContent;
      document
        .getElementById("add_after_me")
        .insertAdjacentHTML(
          "beforebegin",
          `<div id=${key} class="new-time mb-3"><label for=${key} class="new-item form-label">${userInput}</label><input type="text" name=${key} class="new-time form-control animate__animated animate__backInLeft" placeholder="Client answer goes here..." readonly/></div>`
        );
      dataStore[key] = true;
      inputNew.value = "";
    }
  });

  removeButton.addEventListener("click", function removeRow(e) {
    e.preventDefault();
    const userInput = form.newItem.value.trim();
    const key = userInput.split(" ").join(JOINER);
    if (!key) {
      infoError.className = errorClass;
      infoError.textContent = "Key cannot be empty!";
    } else if (restricted.includes(key)) {
      infoError.className = errorClass;
      infoError.textContent = "Cannot delete restricted attributes!";
    } else {
      const divToDelete = document.getElementById(key);
      if (divToDelete) {
        divToDelete.parentNode.removeChild(divToDelete);
        delete dataStore[key];
        infoError.className = infoClass;
        infoError.textContent = originalContent;
        inputNew.value = "";
      } else {
        infoError.className = errorClass;
        infoError.textContent = "Key not found in the form!";
      }
    }
  });

  form.addEventListener("submit", async e => {
    e.preventDefault();
    if (
      confirm(
        "Are you sure you are ready with your form? You can will be able to view and edit later"
      )
    ) {
      const title = form.title.value.trim();
      const adminCode = form.adminCode.placeholder.trim();
      if (!title) {
        infoError.className = errorClass;
        infoError.textContent = "Title cannot be empty!";
      } else if (Object.keys(dataStore).length === 0) {
        infoError.className = errorClass;
        infoError.textContent = "Cannot create form with no keys!";
      } else {
        try {
          dataStore.title = title;
          dataStore.code = adminCode;
          const { data } = await axios.post("/auth/forms/create", { form: dataStore });
          if (data.msg) {
            alert(data.msg);
            location.assign("/");
          }
        } catch (err) {
          infoError.className = errorClass;
          if (err.response && err.response.data) {
            const { hawkError } = err.response.data;
            if (hawkError && hawkError.msg) infoError.textContent = hawkError.msg;
          } else {
            infoError.textContent = err.message || "Something went wrong try again later...";
          }
        }
      }
    }
  });
</script>
