<%- include('partials/header'); -%> <%- include('partials/navbar'); -%> <% if (form) {%>
<head>
  <script src="/js/formEditUtility.js"></script>
</head>

<form style="margin-left: 10px; margin-right: 50px" action="/infoData">
  <div
    id="info-data-error-edit"
    class="info-data error alert alert-info"
    style="margin: 5px"
    role="alert"
  >
    You can edit, delete, or send a link of this form in this section
  </div>
  <h2 id="form-data-title" style="text-align: center"><%=form.title%></h2>
  <div class="mb-3">
    <label for="adminCode" class="form-label">Admin Code</label>
    <% if (auth) { %>
    <input
      type="text"
      name="adminCode"
      class="form-control"
      placeholder="<%=auth.code%>"
      readonly
    />
    <% } else { %>
    <input type="text" name="adminCode" class="form-control" placeholder="code123" readonly /> <% }
    %>
  </div>
  <% Object.entries(form).forEach(([key, val]) => { if (val.input && val.inputType) {%>
      <% if (val.inputType === "single") { %> 
      <div id="<%=key%>" class="mb-3">
        <label for="<%=key%>" class="form-label"><%=key.split("_^_").join(" ")%> </label>
        <input
          type="text"
          name="<%=key%>"
          class="form-control skeleton-key-item"
          placeholder="user input goes here"
          readonly
        />
      </div>
    <% } else  {%> 
      <div id="<%=key%>" class="mb-3">
        <label for="<%=key%>" class="form-label"><%=key.split("_^_").join(" ")%> </label>
        <% const isMulti = val.inputType === "mc-multiple" ? true : false%> 
        <% if (isMulti) {%> 
          <select id="<%=key%>-<%=val.input%>-multi" class="form-select skeleton-key-option" multiple>
        <% } else { %> 
          <select id="<%=key%>-<%=val.input%>-single" class="form-select skeleton-key-option" >
          <% } %> 
          <% val.input.split("|*|").forEach((option, i) => { %> 
            <% if (i === 0) {%> 
              <option value="<%=option%>" selected disabled><%=option%> </option>
            <% }  else { %> 
              <option value="<%=option%>" disabled><%=option%></option>
            <%  } %> 
          <% }); %> 
        </select>
      </div>
    <% } %> 
  <% } }); %>
  <p style="display:none" id="add_after_me"></p>
  <div class="mb-3" style="margin-top: 30px">
    <label for="newItem" class="newItem form-label">Works the same as when you are creating the form</label>
    <select
      onchange="showOptionsText()"
      class="form-select"
      id="mc-single-select"
      style="margin-bottom: 30px"
    >
      <option value="single" selected>Single</option>
      <option value="mc-single">Single Multiple Choice</option>
      <option value="mc-multi">Multi-Select</option>
    </select>
    <input
      type="text"
      id="new-item-input"
      name="newItem"
      class="form-control"
      placeholder="my-key"
    />
    <input
      type="text"
      style="margin-top: 10px; display: none"
      id="new-item-input-options"
      name="newItemOptions"
      class="form-control"
      placeholder="option1|option2|option3"
    />
  </div>
  <div style="margin-left: 5px; margin-right: 5px; margin-bottom: 16px">
    <button class="btn btn-info" id="add-item-btn-edit" style="margin-right: 5px; margin-top: 5px">
      Add Key
    </button>
    <button class="btn btn-danger" style="margin-top: 5px" id="remove-item-btn-edit">
      Remove Key
    </button>
  </div>
  <div style="text-align: center">
    <button
      id="action-edit-btn"
      class="btn btn-primary"
      style="font-size: x-large; margin-top: 5px"
    >
      Finish Editing Form
    </button>
    <button
      id="action-delete-btn"
      class="btn btn-danger"
      style="font-size: x-large; margin-top: 5px"
    >
      Delete Form
    </button>
  </div>
</form>
<input style="display: none" id="dataStorage" value="<%=JSON.stringify(form) %>"></input>
<% } %>

<script>
  const form = document.querySelector("form");

  const addButton = document.getElementById("add-item-btn-edit");
  const removeButton = document.getElementById("remove-item-btn-edit");
  const finishEditButton = document.getElementById("action-edit-btn");
  const deleteFormButton = document.getElementById("action-delete-btn");

  const infoError = document.getElementById("info-data-error-edit");

  const dataStore = {
    isSkeleton: true,
    code: form.adminCode.placeholder.trim(),
    title: document.getElementById("form-data-title").textContent
  };

  const inputNew = document.getElementById("new-item-input");
  const optionsNew = document.getElementById("new-item-input-options");

  const errorClass = "info-data alert alert-danger";
  const infoClass = "info-data alert alert-info";
  const originalContent = "You can edit, delete, or send a link of this form in this section";

  const inputs = document.querySelectorAll(".skeleton-key-item");
  const inputOptions = document.querySelectorAll(".skeleton-key-option")
  inputs.forEach(input => (dataStore[input.name] = {input: "UNANSWERED", inputType: "single"}));
  inputOptions.forEach(singleOptions => { 
    const target = singleOptions.id.split("-");
    const key = target[0]
    const input = target[1]
    const inputType = target[2] === "multi" ? "mc-multiple" : "mc-single"
    dataStore[key] = {input, inputType}
  });
  

  addButton.addEventListener("click", appendRow);

  removeButton.addEventListener("click", removeRow);

  finishEditButton.addEventListener("click", async e => {
    e.preventDefault();
    if (confirm("Are you sure you want to modify your form?")) {
      try {
        const { data } = await axios.put("/auth/forms/edit", { form: dataStore });
        if (data.msg) {
          infoError.className = "reset error alert alert-success";
          infoError.textContent = data.msg;
        }
      } catch (err) {
        infoError.className = errorClass;
        if (err.response && err.response.data) {
          const { hawkError } = err.response.data;
          if (hawkError && hawkError.msg) infoError.textContent = hawkError.msg;
        } else {
          infoError.textContent = err.message || "Something went wrong try again later...";
        }
      }
    }
  });

  deleteFormButton.addEventListener("click", async e => {
    e.preventDefault();
    if (confirm("Are you are you want to delete this form!")) {
      try {
        console.table(dataStore);
        const { data } = await axios.delete("/auth/forms/delete", {
          data: {
            title: dataStore.title,
            code: dataStore.code
          }
        });
        if (data.msg) {
          infoError.className = "reset error alert alert-success";
          infoError.textContent = `${data.msg} Redirecting you to home...`;
          await new Promise(resolve => setTimeout(resolve, 1500));
          location.assign("/");
        }
      } catch (err) {
        infoError.className = errorClass;
        if (err.response && err.response.data) {
          const { hawkError } = err.response.data;
          if (hawkError && hawkError.msg) infoError.textContent = hawkError.msg;
        } else {
          infoError.textContent = err.message || "Something went wrong try again later...";
        }
      }
    }
  });
</script>
